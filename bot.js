// bot.js - Telegram –±–æ—Ç v2.1 —Å Stars –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–º–ø—Ç–æ–≤

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const { engines, subscriptions } = require('./config');
const { enhancePrompt, refinePrompt, formatResult } = require('./promptEnhancer');
const {
  initializeDatabase,
  getOrCreateUser,
  getUserSubscription,
  setUserSubscription,
  checkDailyLimit,
  incrementDailyUsage,
  getOrCreateSession,
  updateSession,
  resetSession,
  savePromptToHistory
} = require('./database');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.OPENAI_API_KEY) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check (–¥–ª—è Cron Job)
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('ü§ñ Prompd bot is running!');
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    bot: 'running',
    uptime: Math.floor(process.uptime()),
    timestamp: new Date().toISOString()
  });
});

app.listen(PORT, () => {
  console.log(`üåê Web server listening on port ${PORT}`);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
initializeDatabase();

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–≤–∏–∂–∫–æ–≤
 */
function createEngineKeyboard() {
  const buttons = [];
  
  const imageEngines = [];
  const videoEngines = [];
  const other = [];
  
  Object.keys(engines).forEach(key => {
    const engine = engines[key];
    const buttonData = {
      text: `${engine.icon} ${engine.name}`,
      callback_data: `engine_${key}`
    };
    
    if (engine.category === 'image') {
      imageEngines.push([buttonData]);
    } else if (engine.category === 'video') {
      videoEngines.push([buttonData]);
    } else {
      other.push([buttonData]);
    }
  });
  
  return { 
    inline_keyboard: [...imageEngines, ...videoEngines, ...other]
  };
}

/**
 * –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å/–Ω–æ–≤—ã–π)
 */
function createResultKeyboard() {
  return {
    inline_keyboard: [[
      { text: 'üîÑ –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å', callback_data: 'refine' },
      { text: '‚û°Ô∏è –ù–æ–≤—ã–π', callback_data: 'new_prompt' }
    ]]
  };
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /start
 */
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from.first_name || '–¥—Ä—É–≥';
  
  getOrCreateUser(chatId, msg.from.username);
  
  const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!

–Ø *Prompd* - —É–ª—É—á—à–∞—é –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è AI-–¥–≤–∏–∂–∫–æ–≤.

üéØ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1. –í—ã–±–µ—Ä–∏ –¥–≤–∏–∂–æ–∫ ‚Üí /select
2. –ù–∞–ø–∏—à–∏ –ø—Ä–æ–º–ø—Ç (–º–æ–∂–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
3. –ü–æ–ª—É—á–∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
4. –î–æ—Ä–∞–±–æ—Ç–∞–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

‚ú® *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:*
üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: Midjourney, DALL-E, Flux, Firefly, Soul, Ideogram, Nanobanana
üé¶ –í–∏–¥–µ–æ: Runway, Pika, Kling, Luma, Sora 2, Stable Video
üé≠ 3D: Meshy

üÜì *Free –ø–ª–∞–Ω:*
3 –ø—Ä–æ–º–ø—Ç–∞/–¥–µ–Ω—å, –≤—Å–µ –¥–≤–∏–∂–∫–∏

‚≠ê *PRO (990 ‚ÇΩ/–º–µ—Å):*
–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã, –¥–æ—Ä–∞–±–æ—Ç–∫–∏

–ù–∞—á–Ω–∏ —Å /select! üöÄ`;

  bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
});

/**
 * –ö–æ–º–∞–Ω–¥–∞ /help
 */
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `üìñ *–°–ø—Ä–∞–≤–∫–∞ Prompd*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å
/select - –í—ã–±—Ä–∞—Ç—å –¥–≤–∏–∂–æ–∫
/info - –ò–Ω—Ñ–æ –æ –¥–≤–∏–∂–∫–µ
/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ PRO
/status - –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å
/help - –°–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å:*
1. –í—ã–±–µ—Ä–∏ –¥–≤–∏–∂–æ–∫
2. –ü–∏—à–∏ –ø—Ä–æ–º–ø—Ç
3. –ù–∞–∂–∏–º–∞–π "–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å" –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
4. –ò–ª–∏ "–ù–æ–≤—ã–π" –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å - —è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é! üí¨`;

  bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

/**
 * –ö–æ–º–∞–Ω–¥–∞ /status - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
 */
bot.onText(/\/status/, (msg) => {
  const chatId = msg.chat.id;
  const subscription = getUserSubscription(chatId);
  const sub = subscriptions[subscription];
  const limitInfo = checkDailyLimit(chatId);

  let statusMessage = `üìä *–¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:*\n\n`;
  statusMessage += `–ü–æ–¥–ø–∏—Å–∫–∞: *${sub.name}*\n`;
  
  if (subscription === 'FREE') {
    statusMessage += `üìù –ü—Ä–æ–º–ø—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${3 - limitInfo.remaining}/3\n`;
    statusMessage += `–û—Å—Ç–∞–ª–æ—Å—å: *${limitInfo.remaining}*\n\n`;
    statusMessage += `üíé –•–æ—á–µ—à—å –±–æ–ª—å—à–µ?\n`;
    statusMessage += `/subscribe - –ø–æ–ª—É—á–∏ PRO –¥–æ—Å—Ç—É–ø`;
  } else if (subscription === 'PRO') {
    statusMessage += `‚ú® –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã\n`;
    statusMessage += `‚ú® –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n\n`;
    statusMessage += `üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!`;
  }

  bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
});

/**
 * –ö–æ–º–∞–Ω–¥–∞ /subscribe
 */
bot.onText(/\/subscribe/, (msg) => {
  const chatId = msg.chat.id;

  const subscribeMessage = `üíé *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Prompd*

üÜì *–°–µ–π—á–∞—Å —Ç—ã –Ω–∞ FREE:*
‚Ä¢ 3 –ø—Ä–æ–º–ø—Ç–∞ –≤ –¥–µ–Ω—å
‚Ä¢ –í—Å–µ –¥–≤–∏–∂–∫–∏
‚Ä¢ –ë–µ–∑ –¥–æ—Ä–∞–±–æ—Ç–æ–∫

‚≠ê *PRO - 990 ‚ÇΩ/–º–µ—Å*
‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
‚úÖ –í—Å–µ –¥–≤–∏–∂–∫–∏
‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏
‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å`;

  const keyboard = {
    inline_keyboard: [
      [{ text: '‚≠ê PRO (990 ‚ÇΩ/–º–µ—Å)', callback_data: 'pay_pro' }]
    ]
  };

  bot.sendMessage(chatId, subscribeMessage, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
});

/**
 * –ö–æ–º–∞–Ω–¥–∞ /select - –≤—ã–±–æ—Ä –¥–≤–∏–∂–∫–∞
 */
bot.onText(/\/select/, (msg) => {
  const chatId = msg.chat.id;
  
  const message = `üéØ *–í—ã–±–µ—Ä–∏ AI-–¥–≤–∏–∂–æ–∫:*`;
  
  bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: createEngineKeyboard()
  });
});

/**
 * –ö–æ–º–∞–Ω–¥–∞ /info
 */
bot.onText(/\/info/, (msg) => {
  const chatId = msg.chat.id;
  const session = getOrCreateSession(chatId);
  
  if (!session.selected_engine) {
    bot.sendMessage(chatId, 
      '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–≤–∏–∂–æ–∫ ‚Üí /select',
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  const engine = engines[session.selected_engine];
  
  let infoMessage = `${engine.icon} *${engine.name}*\n\n`;
  infoMessage += `üìù ${engine.description}\n\n`;
  
  if (engine.maxLength) {
    infoMessage += `‚è±Ô∏è –ú–∞–∫—Å. –¥–ª–∏–Ω–∞: ${engine.maxLength}\n\n`;
  }
  
  if (engine.parameters) {
    infoMessage += `‚öôÔ∏è *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:* ${engine.parameters.join(', ')}\n\n`;
  }
  
  infoMessage += `üí° *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*\n`;
  engine.enhancementRules.slice(0, 3).forEach((rule, i) => {
    infoMessage += `${i + 1}. ${rule}\n`;
  });
  
  bot.sendMessage(chatId, infoMessage, { parse_mode: 'Markdown' });
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram Stars –ø–ª–∞—Ç–µ–∂–µ–π
 */
bot.on('pre_checkout_query', async (query) => {
  bot.answerPreCheckoutQuery(query.id, true);
});

bot.on('successful_payment', (msg) => {
  const chatId = msg.chat.id;
  const payload = msg.successful_payment.invoice_payload;

  if (payload === 'pro_subscription') {
    setUserSubscription(chatId, 'PRO', 30);
    bot.sendMessage(chatId, 
      '‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ PRO!*\n\n' +
      '–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è:\n' +
      '‚ú® –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã\n' +
      '‚ú® –í—Å–µ –¥–≤–∏–∂–∫–∏\n' +
      '‚ú® –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n\n' +
      '–ù–∞—á–Ω–∏ —Å /select üöÄ',
      { parse_mode: 'Markdown' }
    );
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
 */
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  try {
    // –í—ã–±–æ—Ä –¥–≤–∏–∂–∫–∞
    if (data.startsWith('engine_')) {
      const engineKey = data.replace('engine_', '');
      const engine = engines[engineKey];
      
      if (!engine) {
        await bot.answerCallbackQuery(query.id, { text: '‚ùå –û—à–∏–±–∫–∞' });
        return;
      }

      updateSession(chatId, { 
        selectedEngine: engineKey,
        currentEnhancedPrompt: null,
        iterationCount: 0,
        refinementsUsed: 0
      });
      
      await bot.answerCallbackQuery(query.id, { text: `‚úÖ ${engine.name}` });
      
      const confirmMessage = `‚úÖ *${engine.icon} ${engine.name}*\n\n` +
        `${engine.description}\n\n` +
        `–û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º–ø—Ç - —è —É–ª—É—á—à—É! üöÄ`;
      
      await bot.editMessageText(confirmMessage, {
        chat_id: chatId,
        message_id: query.message.message_id,
        parse_mode: 'Markdown'
      });
    }

    // –î–æ—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
    else if (data === 'refine') {
      await bot.answerCallbackQuery(query.id);
      
      const msg = await bot.sendMessage(chatId, 
        'üìù –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–º–ø—Ç–µ?\n\n' +
        '_–ù–∞–ø—Ä–∏–º–µ—Ä: "–¥–æ–±–∞–≤—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π" –∏–ª–∏ "—Å–¥–µ–ª–∞–π –∫–æ—Ä–æ—á–µ"_',
        { parse_mode: 'Markdown' }
      );

      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      bot.onReplyToMessage(chatId, msg.message_id, async (replyMsg) => {
        await handleRefinement(chatId, replyMsg.text);
      });
    }

    // –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    else if (data === 'new_prompt') {
      await bot.answerCallbackQuery(query.id);
      resetSession(chatId);
      
      const message = `üéØ *–í—ã–±–µ—Ä–∏ AI-–¥–≤–∏–∂–æ–∫:*`;
      
      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: createEngineKeyboard()
      });
    }

    // –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    else if (data === 'pay_pro') {
      const title = 'PRO –ø–æ–¥–ø–∏—Å–∫–∞';
      const description = '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –º–µ—Å—è—Ü';
      const payload = 'pro_subscription';
      const priceInCopeks = 99900; // 990 —Ä—É–± –≤ –∫–æ–ø–µ–π–∫–∞—Ö

      await bot.sendInvoice(chatId, {
        title: title,
        description: description,
        payload: payload,
        provider_token: '', // Telegram Stars –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–∞
        currency: 'XTR', // XTR - —ç—Ç–æ Telegram Stars
        prices: [{ label: '990 ‚ÇΩ', amount: priceInCopeks }],
        reply_markup: {
          inline_keyboard: [[
            { text: '‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å 990 ‚ÇΩ', callback_data: 'dummy' }
          ]]
        }
      }).catch(err => {
        bot.sendMessage(chatId,
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–ª–∞—Ç–µ–∂–∞\n\n' +
          '–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
          { parse_mode: 'Markdown' }
        );
      });
    }

  } catch (error) {
    console.error('Error in callback_query:', error);
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–º–ø—Ç–æ–≤)
 */
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!text || text.startsWith('/') || msg.successful_payment) {
    return;
  }

  try {
    const subscription = getUserSubscription(chatId);
    const session = getOrCreateSession(chatId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –¥–≤–∏–∂–æ–∫
    if (!session.selected_engine) {
      bot.sendMessage(chatId, 
        '‚ö†Ô∏è –í—ã–±–µ—Ä–∏ –¥–≤–∏–∂–æ–∫ ‚Üí /select',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è FREE –ø–ª–∞–Ω–∞
    if (subscription === 'FREE') {
      const limitInfo = checkDailyLimit(chatId);
      if (!limitInfo.canUse) {
        bot.sendMessage(chatId,
          '‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (5 –ø—Ä–æ–º–ø—Ç–æ–≤)\n\n' +
          'üíé –ü–æ–ª—É—á–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø:\n' +
          '/subscribe',
          { parse_mode: 'Markdown' }
        );
        return;
      }
    }

    const processingMsg = await bot.sendMessage(chatId, '‚è≥ –£–ª—É—á—à–∞—é –ø—Ä–æ–º–ø—Ç...');

    let result;

    // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    if (session.current_enhanced_prompt) {
      result = await refinePrompt(
        session.original_prompt,
        session.current_enhanced_prompt,
        text,
        session.selected_engine
      );
    } else {
      // –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
      result = await enhancePrompt(text, session.selected_engine);
    }

    if (!result.success) {
      await bot.editMessageText(`‚ùå ${result.error}`, {
        chat_id: chatId,
        message_id: processingMsg.message_id
      });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
    updateSession(chatId, {
      originalPrompt: text,
      currentEnhancedPrompt: result.enhanced,
      iterationCount: session.iteration_count + 1
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    savePromptToHistory(
      chatId,
      session.selected_engine,
      text,
      result.enhanced,
      session.iteration_count
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const formattedResult = formatResult(result);
    
    await bot.editMessageText(formattedResult, {
      chat_id: chatId,
      message_id: processingMsg.message_id,
      parse_mode: 'Markdown'
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏/–Ω–æ–≤—ã–π
    await bot.sendMessage(chatId, 'üí° –ß—Ç–æ –¥–∞–ª—å—à–µ?', {
      reply_markup: createResultKeyboard()
    });

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è FREE –ø–ª–∞–Ω–∞
    if (subscription === 'FREE') {
      incrementDailyUsage(chatId);
    }

  } catch (error) {
    console.error('Error processing message:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ');
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
 */
async function handleRefinement(chatId, refinementText) {
  try {
    const session = getOrCreateSession(chatId);
    const subscription = getUserSubscription(chatId);

    if (!session.current_enhanced_prompt) {
      bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –¥–ª—è FREE
    if (subscription === 'FREE' && session.refinements_used >= 1) {
      bot.sendMessage(chatId,
        '‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –¥–æ—Ä–∞–±–æ—Ç–æ–∫ (1 –Ω–∞ –ø—Ä–æ–º–ø—Ç)\n\n' +
        'üíé PRO: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n' +
        '/subscribe',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    const processingMsg = await bot.sendMessage(chatId, '‚è≥ –î–æ—Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–º–ø—Ç...');

    const result = await refinePrompt(
      session.original_prompt,
      session.current_enhanced_prompt,
      refinementText,
      session.selected_engine
    );

    if (!result.success) {
      await bot.editMessageText(`‚ùå ${result.error}`, {
        chat_id: chatId,
        message_id: processingMsg.message_id
      });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    updateSession(chatId, {
      currentEnhancedPrompt: result.enhanced,
      iterationCount: session.iteration_count + 1,
      refinementsUsed: session.refinements_used + 1
    });

    const formattedResult = formatResult(result);
    
    await bot.editMessageText(formattedResult, {
      chat_id: chatId,
      message_id: processingMsg.message_id,
      parse_mode: 'Markdown'
    });

    await bot.sendMessage(chatId, 'üí° –ß—Ç–æ –¥–∞–ª—å—à–µ?', {
      reply_markup: createResultKeyboard()
    });

  } catch (error) {
    console.error('Error in refinement:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('Unhandled rejection:', error);
});

console.log('‚úÖ Prompd v2.1 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');